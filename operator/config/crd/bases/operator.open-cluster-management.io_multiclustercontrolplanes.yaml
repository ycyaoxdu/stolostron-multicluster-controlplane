---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: multiclustercontrolplanes.operator.open-cluster-management.io
spec:
  group: operator.open-cluster-management.io
  names:
    kind: MulticlusterControlplane
    listKind: MulticlusterControlplaneList
    plural: multiclustercontrolplanes
    singular: multiclustercontrolplane
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: MulticlusterControlplane is the Schema for the multiclustercontrolplanes
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MulticlusterControlplaneSpec defines the desired state of
              MulticlusterControlplane
            properties:
              controlplaneImagePullSpec:
                default: quay.io/open-cluster-management/multicluster-controlplane
                description: Image represents the desired image
                  of multicluster controlplane.
                type: string
              storageOption:
                default:
                  mode: Embedded
                description: StorageOption contains the options of storage. Embedded
                  mode is used if StorageOption is not set.
                properties:
                  external:
                    description: External includes configurations we needs for connect
                      to external etcd in the External mode.
                    type: object
                  mode:
                    default: Embedded
                    description: 'Mode can be Embedded or External. In Embedded mode,
                      the controlplane saves all data in embedded etcd. In External
                      mode, the controlplane connect to external etcd and saves all
                      data in it. Note: Do not modify the Mode field once it''s applied.'
                    enum:
                    - Embedded
                    - External
                    type: string
                type: object
            type: object
          status:
            description: MulticlusterControlplaneStatus defines the observed state
              of MulticlusterControlplane
            properties:
              conditions:
                description: 'Conditions contain the different condition statuses
                  for this ClusterManager. Valid condition types are: Applied: Components
                  in hub are applied. Available: Components in hub are available and
                  ready to serve. Progressing: Components in hub are in a transitioning
                  state. Degraded: Components in hub do not match the desired configuration
                  and only provide degraded service.'
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              generations:
                description: Generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1
                  properties:
                    group:
                      description: group is the group of the resource that you're
                        tracking
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the resource
                        that controller applies
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the resource that you're tracking
                      type: string
                    namespace:
                      description: namespace is where the resource that you're tracking
                        is
                      type: string
                    resource:
                      description: resource is the resource type of the resource that
                        you're tracking
                      type: string
                    version:
                      description: version is the version of the resource that you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
            required:
            - conditions
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
